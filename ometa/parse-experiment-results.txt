ometa V8ResultsParser <: Parser {
  hexDigit     = char:x {this.hexDigits.indexOf(x.toLowerCase())}:v ?(v >= 0)        -> v,
  hexLit       = hexLit:n hexDigit:d                                                 -> (n * 16 + d)
               | hexDigit,
  intDigit     = char:x {this.hexDigits.indexOf(x.toLowerCase())}:v ?(v >= 0)        -> v,
  intLit       = intLit:n intDigit:d                                                 -> (n * 10 + d)
               | intDigit,
  number       = ``0x'' hexLit:n                                                     ->  n
               | digit+:ws ('.' digit+ | empty -> []):fs 
                 ( ('e' ('+' | '-' | empty -> ''):sign digit+:ds -> {['e', sign].concat(ds)})
                   | {[]}):es                                                        -> parseFloat(ws.join('') + '.' +
                                                                                                   fs.join('') + es.join(''))
               | intLit:n                                                            -> n,

  name         = (~':' ~space char)*:cs ':'                                          -> cs.join(''),
  scoreBar     = ``----'',
  score        = "Score (version 7): " number,
  result       = name:n spaces number:s spaces                                       -> (n + ":" + s),
  topLevel     = result*:rs spaces scoreBar spaces score:s spaces end              -> ("({benchmarks:{" + rs.join(",") + "}, score:" + s + "})")
}
V8ResultsParser.initialize = function () 
{

    this.hexDigits = "0123456789abcdef";
}

ometa SunSpiderResultsParser <: Parser {
    spacesNoNl   = (~'\n' space)*,
    intDigit     = char:x {this.hexDigits.indexOf(x.toLowerCase())}:v ?(v >= 0)        -> v,
    intLit       = intLit:n intDigit:d                                                 -> (n * 10 + d)
                 | intDigit,
    number       = digit+:ws ('.' digit+ | empty -> []):fs 
                   ( ('e' ('+' | '-' | empty -> ''):sign digit+:ds -> {['e', sign].concat(ds)})
                     | {[]}):es                                                        -> parseFloat(ws.join('') + '.' +
                                                                                                     fs.join('') + es.join(''))
                 | intLit:n                                                            -> n,

    name         = (~':' ~space char)*:cs ':'                                          -> cs.join(''),
    
    separator    = ( ``--------------------------------------------'' 
                   | ``============================================'') spaces,
    header       = separator junk separator score:s separator                          -> s,
    footer       = ``Results are located'' junk,
    junk         = ~separator (~'\n' char)* '\n',
    category     = spacesNoNl name:n spaces junk test*:ts spacesNoNl '\n'                    -> (ts.map(function (x) { return "'" + n + "-" + x[0] + "':" + x[1]; }).join(",")),
    test         = spacesNoNl name:n spaces number:nb ``ms +/- '' number '%' spacesNoNl '\n' -> [n,nb],
    score        = ``Total:'' spaces number:nb junk                                      -> nb,
    topLevel     = junk* header:s spaces category*:cs footer                             -> ("({benchmarks:{" + cs.join(",") + "}, score:" + s + "})")
}
SunSpiderResultsParser.initialize = function () 
{

    this.hexDigits = "0123456789abcdef";
}
